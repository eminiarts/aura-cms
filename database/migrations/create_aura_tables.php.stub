<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('users');
        Schema::dropIfExists('password_resets');
        Schema::dropIfExists('sessions');
        Schema::dropIfExists('jobs');
        Schema::dropIfExists('job_batches');
        Schema::dropIfExists('failed_jobs');
        Schema::dropIfExists('personal_access_tokens');
        Schema::dropIfExists('teams');
        Schema::dropIfExists('user_role');
        Schema::dropIfExists('team_invitations');
        Schema::dropIfExists('options');
        Schema::dropIfExists('notifications');
        Schema::dropIfExists('posts');
        Schema::dropIfExists('meta');
        Schema::dropIfExists('post_relations');
        Schema::dropIfExists('roles');
        Schema::dropIfExists('permissions');
    }

    public function up()
    {
        Schema::dropIfExists('users');

        Schema::create('users', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('email')->unique();
            $table->timestamp('email_verified_at')->nullable();
            $table->string('password');
            $table->text('two_factor_secret')->nullable();
            $table->text('two_factor_recovery_codes')->nullable();
            $table->timestamp('two_factor_confirmed_at')->nullable();
            $table->rememberToken();
            if (config('aura.teams')) {
                $table->foreignId('current_team_id')->nullable();
            }
            $table->timestamps();
            $table->softDeletes();
        });

        Schema::dropIfExists('password_resets');

        Schema::create('password_resets', function (Blueprint $table) {
            $table->string('email')->index();
            $table->string('token');
            $table->timestamp('created_at')->nullable();
        });

        Schema::dropIfExists('personal_access_tokens');

        Schema::create('personal_access_tokens', function (Blueprint $table) {
            $table->id();
            $table->morphs('tokenable');
            $table->string('name');
            $table->string('token', 64)->unique();
            $table->text('abilities')->nullable();
            $table->timestamp('last_used_at')->nullable();
            $table->timestamp('expires_at')->nullable();
            $table->timestamps();
        });

        Schema::dropIfExists('password_reset_tokens');

        Schema::create('password_reset_tokens', function (Blueprint $table) {
            $table->string('email')->primary();
            $table->string('token');
            $table->timestamp('created_at')->nullable();
        });

        if (config('aura.teams')) {
            Schema::create('teams', function (Blueprint $table) {
                $table->id();
                $table->foreignId('user_id')->index();
                $table->string('name');
                $table->timestamps();
                $table->softDeletes();
            });

            Schema::create('user_role', function (Blueprint $table) {
                $table->foreignId('team_id');
                $table->foreignId('user_id');
                $table->foreignId('role_id');
                $table->timestamps();
                $table->unique(['team_id', 'user_id']);
            });

            Schema::create('team_invitations', function (Blueprint $table) {
                $table->id();
                $table->foreignId('team_id')->constrained()->cascadeOnDelete();
                $table->string('email');
                $table->string('role')->nullable();
                $table->timestamps();

                $table->unique(['team_id', 'email']);
            });
        } else {
            Schema::create('user_role', function (Blueprint $table) {
                $table->foreignId('user_id');
                $table->foreignId('role_id');
                $table->timestamps();
                $table->unique(['user_id']);
            });
        }

        Schema::create('posts', function (Blueprint $table) {
            $table->id();
            $table->text('title')->nullable();
            $table->longText('content')->nullable();
            $table->string('type', 20);
            $table->string('status', 20)->default('publish')->nullable();
            $table->string('slug')->index()->nullable();
            $table->foreignId('user_id')->nullable()->index();
            $table->foreignId('parent_id')->nullable()->index();
            $table->integer('order')->nullable();
            if (config('aura.teams')) {
                $table->foreignId('team_id')->nullable();
            }
            $table->timestamps();
            $table->softDeletes();

            if (config('aura.teams')) {
                $table->index(['team_id', 'type']); // Add the new, optimized index
            } else {
                $table->index(['type', 'status', 'created_at', 'id']);
            }
        });

        Schema::create('meta', function (Blueprint $table) {
            $table->id();
            $table->morphs('metable');
            $table->string('key')->nullable()->index();
            $table->longText('value')->nullable();

            $table->index(['metable_type', 'metable_id', 'key']);
        });

        if (config('database.default') === 'mysql') {
            DB::statement('CREATE INDEX idx_meta_metable_id_key_value ON meta (metable_id, `key`, value(255));');
        }

        Schema::create('post_relations', function (Blueprint $table) {
            $table->morphs('resource');
            $table->morphs('related');
            $table->integer('order')->nullable();
            $table->string('slug')->nullable();
            $table->timestamps();

            $table->index(['resource_id', 'related_id', 'related_type']);
            $table->index('slug');
        });

        Schema::create('roles', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('slug');
            $table->text('description')->nullable();
            $table->boolean('super_admin')->default(false);
            $table->json('permissions')->nullable();
            $table->foreignId('user_id')->nullable();
            if (config('aura.teams')) {
                $table->foreignId('team_id')->nullable()->constrained()->onDelete('cascade');
            }
            $table->timestamps();

            if (config('aura.teams')) {
                $table->unique(['slug', 'team_id']);
            } else {
                $table->unique(['slug']);
            }
            $table->index('slug');
        });

        Schema::create('permissions', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('slug');
            $table->text('description')->nullable();
            $table->string('group')->nullable();
            $table->foreignId('user_id')->nullable();
            if (config('aura.teams')) {
                $table->foreignId('team_id')->nullable()->constrained()->onDelete('cascade');
            }
            $table->timestamps();

            if (config('aura.teams')) {
                $table->unique(['slug', 'team_id']);
            } else {
                $table->unique(['slug']);
            }
            $table->index('slug');
        });

        Schema::create('options', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->longText('value');
            if (config('aura.teams')) {
                $table->foreignId('team_id');
            }
            $table->timestamps();

            if (config('aura.teams')) {
                $table->index(['team_id', 'name']);
            } else {
                $table->index(['name']);
            }
        });

        Schema::create('notifications', function (Blueprint $table) {
            $table->uuid('id')->primary();
            $table->string('type');
            $table->morphs('notifiable');
            $table->text('data');
            $table->timestamp('read_at')->nullable();
            $table->timestamps();
        });

        if (! Schema::hasTable('jobs')) {
            Schema::create('jobs', function (Blueprint $table) {
                $table->id();
                $table->string('queue')->index();
                $table->longText('payload');
                $table->unsignedTinyInteger('attempts');
                $table->unsignedInteger('reserved_at')->nullable();
                $table->unsignedInteger('available_at');
                $table->unsignedInteger('created_at');
            });
        }

        if (! Schema::hasTable('job_batches')) {
            Schema::create('job_batches', function (Blueprint $table) {
                $table->string('id')->primary();
                $table->string('name');
                $table->integer('total_jobs');
                $table->integer('pending_jobs');
                $table->integer('failed_jobs');
                $table->longText('failed_job_ids');
                $table->mediumText('options')->nullable();
                $table->integer('cancelled_at')->nullable();
                $table->integer('created_at');
                $table->integer('finished_at')->nullable();
            });
        }

        if (! Schema::hasTable('failed_jobs')) {
            Schema::create('failed_jobs', function (Blueprint $table) {
                $table->id();
                $table->string('uuid')->unique();
                $table->text('connection');
                $table->text('queue');
                $table->longText('payload');
                $table->longText('exception');
                $table->timestamp('failed_at')->useCurrent();
            });
        }
    }
};
